// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages/messages.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	messages/messages.proto

It has these top-level messages:
	EchoRequest
	EchoResponse
	PingRequest
	PingResponse
	OVSResponse
	CreateBridgeRequest
	DeleteBridgeRequest
	AddPortRequest
	DeletePortRequest
	AddFlowRequest
	DeleteFlowRequest
	DumpFlowsRequest
	DumpFlowsResponse
	DumpPortsRequest
	DumpPortsResponse
	DumpPortRequest
	DumpPortResponse
	FindNetworkNamespacePathRequest
	FindNetworkNamespacePathResponse
	ConnectBridgeRequest
	ConnectBridgeResponse
	ConfigureIfaceRequest
	ConfigureIfaceResponse
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Word string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoRequest) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type EchoResponse struct {
	Word string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoResponse) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type PingRequest struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRequest) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type PingResponse struct {
	Pong string `protobuf:"bytes,1,opt,name=pong" json:"pong,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

type OVSResponse struct {
	Type    string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *OVSResponse) Reset()                    { *m = OVSResponse{} }
func (m *OVSResponse) String() string            { return proto.CompactTextString(m) }
func (*OVSResponse) ProtoMessage()               {}
func (*OVSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OVSResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OVSResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OVSResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type CreateBridgeRequest struct {
	BridgeName   string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	DatapathType string `protobuf:"bytes,2,opt,name=datapathType" json:"datapathType,omitempty"`
}

func (m *CreateBridgeRequest) Reset()                    { *m = CreateBridgeRequest{} }
func (m *CreateBridgeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBridgeRequest) ProtoMessage()               {}
func (*CreateBridgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateBridgeRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *CreateBridgeRequest) GetDatapathType() string {
	if m != nil {
		return m.DatapathType
	}
	return ""
}

type DeleteBridgeRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
}

func (m *DeleteBridgeRequest) Reset()                    { *m = DeleteBridgeRequest{} }
func (m *DeleteBridgeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBridgeRequest) ProtoMessage()               {}
func (*DeleteBridgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteBridgeRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

type AddPortRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	IfaceName  string `protobuf:"bytes,2,opt,name=ifaceName" json:"ifaceName,omitempty"`
}

func (m *AddPortRequest) Reset()                    { *m = AddPortRequest{} }
func (m *AddPortRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPortRequest) ProtoMessage()               {}
func (*AddPortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddPortRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *AddPortRequest) GetIfaceName() string {
	if m != nil {
		return m.IfaceName
	}
	return ""
}

type DeletePortRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	IfaceName  string `protobuf:"bytes,2,opt,name=ifaceName" json:"ifaceName,omitempty"`
}

func (m *DeletePortRequest) Reset()                    { *m = DeletePortRequest{} }
func (m *DeletePortRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePortRequest) ProtoMessage()               {}
func (*DeletePortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeletePortRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *DeletePortRequest) GetIfaceName() string {
	if m != nil {
		return m.IfaceName
	}
	return ""
}

type AddFlowRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	FlowString string `protobuf:"bytes,2,opt,name=flowString" json:"flowString,omitempty"`
}

func (m *AddFlowRequest) Reset()                    { *m = AddFlowRequest{} }
func (m *AddFlowRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFlowRequest) ProtoMessage()               {}
func (*AddFlowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddFlowRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *AddFlowRequest) GetFlowString() string {
	if m != nil {
		return m.FlowString
	}
	return ""
}

type DeleteFlowRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	FlowString string `protobuf:"bytes,2,opt,name=flowString" json:"flowString,omitempty"`
}

func (m *DeleteFlowRequest) Reset()                    { *m = DeleteFlowRequest{} }
func (m *DeleteFlowRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFlowRequest) ProtoMessage()               {}
func (*DeleteFlowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteFlowRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *DeleteFlowRequest) GetFlowString() string {
	if m != nil {
		return m.FlowString
	}
	return ""
}

type DumpFlowsRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
}

func (m *DumpFlowsRequest) Reset()                    { *m = DumpFlowsRequest{} }
func (m *DumpFlowsRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpFlowsRequest) ProtoMessage()               {}
func (*DumpFlowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DumpFlowsRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

type DumpFlowsResponse struct {
	Flows   [][]byte `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
	Success bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Reason  string   `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *DumpFlowsResponse) Reset()                    { *m = DumpFlowsResponse{} }
func (m *DumpFlowsResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpFlowsResponse) ProtoMessage()               {}
func (*DumpFlowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DumpFlowsResponse) GetFlows() [][]byte {
	if m != nil {
		return m.Flows
	}
	return nil
}

func (m *DumpFlowsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DumpFlowsResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type DumpPortsRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
}

func (m *DumpPortsRequest) Reset()                    { *m = DumpPortsRequest{} }
func (m *DumpPortsRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpPortsRequest) ProtoMessage()               {}
func (*DumpPortsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DumpPortsRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

type DumpPortsResponse struct {
	Ports   [][]byte `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	Success bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Reason  string   `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *DumpPortsResponse) Reset()                    { *m = DumpPortsResponse{} }
func (m *DumpPortsResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpPortsResponse) ProtoMessage()               {}
func (*DumpPortsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DumpPortsResponse) GetPorts() [][]byte {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DumpPortsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DumpPortsResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type DumpPortRequest struct {
	BridgeName string `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	PortName   string `protobuf:"bytes,2,opt,name=portName" json:"portName,omitempty"`
}

func (m *DumpPortRequest) Reset()                    { *m = DumpPortRequest{} }
func (m *DumpPortRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpPortRequest) ProtoMessage()               {}
func (*DumpPortRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DumpPortRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *DumpPortRequest) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

type DumpPortResponse struct {
	Port    []byte `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *DumpPortResponse) Reset()                    { *m = DumpPortResponse{} }
func (m *DumpPortResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpPortResponse) ProtoMessage()               {}
func (*DumpPortResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DumpPortResponse) GetPort() []byte {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *DumpPortResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DumpPortResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type FindNetworkNamespacePathRequest struct {
	PodName   string `protobuf:"bytes,1,opt,name=podName" json:"podName,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	PodUUID   string `protobuf:"bytes,3,opt,name=podUUID" json:"podUUID,omitempty"`
}

func (m *FindNetworkNamespacePathRequest) Reset()         { *m = FindNetworkNamespacePathRequest{} }
func (m *FindNetworkNamespacePathRequest) String() string { return proto.CompactTextString(m) }
func (*FindNetworkNamespacePathRequest) ProtoMessage()    {}
func (*FindNetworkNamespacePathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *FindNetworkNamespacePathRequest) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *FindNetworkNamespacePathRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *FindNetworkNamespacePathRequest) GetPodUUID() string {
	if m != nil {
		return m.PodUUID
	}
	return ""
}

type FindNetworkNamespacePathResponse struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *FindNetworkNamespacePathResponse) Reset()         { *m = FindNetworkNamespacePathResponse{} }
func (m *FindNetworkNamespacePathResponse) String() string { return proto.CompactTextString(m) }
func (*FindNetworkNamespacePathResponse) ProtoMessage()    {}
func (*FindNetworkNamespacePathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *FindNetworkNamespacePathResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FindNetworkNamespacePathResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *FindNetworkNamespacePathResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ConnectBridgeRequest struct {
	Path              string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	PodUUID           string `protobuf:"bytes,2,opt,name=podUUID" json:"podUUID,omitempty"`
	ContainerVethName string `protobuf:"bytes,3,opt,name=containerVethName" json:"containerVethName,omitempty"`
	BridgeName        string `protobuf:"bytes,4,opt,name=bridgeName" json:"bridgeName,omitempty"`
}

func (m *ConnectBridgeRequest) Reset()                    { *m = ConnectBridgeRequest{} }
func (m *ConnectBridgeRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectBridgeRequest) ProtoMessage()               {}
func (*ConnectBridgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ConnectBridgeRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ConnectBridgeRequest) GetPodUUID() string {
	if m != nil {
		return m.PodUUID
	}
	return ""
}

func (m *ConnectBridgeRequest) GetContainerVethName() string {
	if m != nil {
		return m.ContainerVethName
	}
	return ""
}

func (m *ConnectBridgeRequest) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

type ConnectBridgeResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *ConnectBridgeResponse) Reset()                    { *m = ConnectBridgeResponse{} }
func (m *ConnectBridgeResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectBridgeResponse) ProtoMessage()               {}
func (*ConnectBridgeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ConnectBridgeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ConnectBridgeResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ConfigureIfaceRequest struct {
	Path              string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	IP                string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
	ContainerVethName string `protobuf:"bytes,3,opt,name=containerVethName" json:"containerVethName,omitempty"`
}

func (m *ConfigureIfaceRequest) Reset()                    { *m = ConfigureIfaceRequest{} }
func (m *ConfigureIfaceRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigureIfaceRequest) ProtoMessage()               {}
func (*ConfigureIfaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ConfigureIfaceRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ConfigureIfaceRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ConfigureIfaceRequest) GetContainerVethName() string {
	if m != nil {
		return m.ContainerVethName
	}
	return ""
}

type ConfigureIfaceResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *ConfigureIfaceResponse) Reset()                    { *m = ConfigureIfaceResponse{} }
func (m *ConfigureIfaceResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigureIfaceResponse) ProtoMessage()               {}
func (*ConfigureIfaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ConfigureIfaceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ConfigureIfaceResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "messages.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "messages.EchoResponse")
	proto.RegisterType((*PingRequest)(nil), "messages.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "messages.PingResponse")
	proto.RegisterType((*OVSResponse)(nil), "messages.OVSResponse")
	proto.RegisterType((*CreateBridgeRequest)(nil), "messages.CreateBridgeRequest")
	proto.RegisterType((*DeleteBridgeRequest)(nil), "messages.DeleteBridgeRequest")
	proto.RegisterType((*AddPortRequest)(nil), "messages.AddPortRequest")
	proto.RegisterType((*DeletePortRequest)(nil), "messages.DeletePortRequest")
	proto.RegisterType((*AddFlowRequest)(nil), "messages.AddFlowRequest")
	proto.RegisterType((*DeleteFlowRequest)(nil), "messages.DeleteFlowRequest")
	proto.RegisterType((*DumpFlowsRequest)(nil), "messages.DumpFlowsRequest")
	proto.RegisterType((*DumpFlowsResponse)(nil), "messages.DumpFlowsResponse")
	proto.RegisterType((*DumpPortsRequest)(nil), "messages.DumpPortsRequest")
	proto.RegisterType((*DumpPortsResponse)(nil), "messages.DumpPortsResponse")
	proto.RegisterType((*DumpPortRequest)(nil), "messages.DumpPortRequest")
	proto.RegisterType((*DumpPortResponse)(nil), "messages.DumpPortResponse")
	proto.RegisterType((*FindNetworkNamespacePathRequest)(nil), "messages.FindNetworkNamespacePathRequest")
	proto.RegisterType((*FindNetworkNamespacePathResponse)(nil), "messages.FindNetworkNamespacePathResponse")
	proto.RegisterType((*ConnectBridgeRequest)(nil), "messages.ConnectBridgeRequest")
	proto.RegisterType((*ConnectBridgeResponse)(nil), "messages.ConnectBridgeResponse")
	proto.RegisterType((*ConfigureIfaceRequest)(nil), "messages.ConfigureIfaceRequest")
	proto.RegisterType((*ConfigureIfaceResponse)(nil), "messages.ConfigureIfaceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkControl service

type NetworkControlClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*OVSResponse, error)
	DeleteBridge(ctx context.Context, in *DeleteBridgeRequest, opts ...grpc.CallOption) (*OVSResponse, error)
	AddPort(ctx context.Context, in *AddPortRequest, opts ...grpc.CallOption) (*OVSResponse, error)
	DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*OVSResponse, error)
	AddFlow(ctx context.Context, in *AddFlowRequest, opts ...grpc.CallOption) (*OVSResponse, error)
	DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*OVSResponse, error)
	DumpFlows(ctx context.Context, in *DumpFlowsRequest, opts ...grpc.CallOption) (*DumpFlowsResponse, error)
	DumpPorts(ctx context.Context, in *DumpPortsRequest, opts ...grpc.CallOption) (*DumpPortsResponse, error)
	DumpPort(ctx context.Context, in *DumpPortRequest, opts ...grpc.CallOption) (*DumpPortResponse, error)
	FindNetworkNamespacePath(ctx context.Context, in *FindNetworkNamespacePathRequest, opts ...grpc.CallOption) (*FindNetworkNamespacePathResponse, error)
	ConnectBridge(ctx context.Context, in *ConnectBridgeRequest, opts ...grpc.CallOption) (*ConnectBridgeResponse, error)
	ConfigureIface(ctx context.Context, in *ConfigureIfaceRequest, opts ...grpc.CallOption) (*ConfigureIfaceResponse, error)
}

type networkControlClient struct {
	cc *grpc.ClientConn
}

func NewNetworkControlClient(cc *grpc.ClientConn) NetworkControlClient {
	return &networkControlClient{cc}
}

func (c *networkControlClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*OVSResponse, error) {
	out := new(OVSResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/CreateBridge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) DeleteBridge(ctx context.Context, in *DeleteBridgeRequest, opts ...grpc.CallOption) (*OVSResponse, error) {
	out := new(OVSResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/DeleteBridge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) AddPort(ctx context.Context, in *AddPortRequest, opts ...grpc.CallOption) (*OVSResponse, error) {
	out := new(OVSResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/AddPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*OVSResponse, error) {
	out := new(OVSResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/DeletePort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) AddFlow(ctx context.Context, in *AddFlowRequest, opts ...grpc.CallOption) (*OVSResponse, error) {
	out := new(OVSResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/AddFlow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) DeleteFlow(ctx context.Context, in *DeleteFlowRequest, opts ...grpc.CallOption) (*OVSResponse, error) {
	out := new(OVSResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/DeleteFlow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) DumpFlows(ctx context.Context, in *DumpFlowsRequest, opts ...grpc.CallOption) (*DumpFlowsResponse, error) {
	out := new(DumpFlowsResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/DumpFlows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) DumpPorts(ctx context.Context, in *DumpPortsRequest, opts ...grpc.CallOption) (*DumpPortsResponse, error) {
	out := new(DumpPortsResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/DumpPorts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) DumpPort(ctx context.Context, in *DumpPortRequest, opts ...grpc.CallOption) (*DumpPortResponse, error) {
	out := new(DumpPortResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/DumpPort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) FindNetworkNamespacePath(ctx context.Context, in *FindNetworkNamespacePathRequest, opts ...grpc.CallOption) (*FindNetworkNamespacePathResponse, error) {
	out := new(FindNetworkNamespacePathResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/FindNetworkNamespacePath", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) ConnectBridge(ctx context.Context, in *ConnectBridgeRequest, opts ...grpc.CallOption) (*ConnectBridgeResponse, error) {
	out := new(ConnectBridgeResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/ConnectBridge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControlClient) ConfigureIface(ctx context.Context, in *ConfigureIfaceRequest, opts ...grpc.CallOption) (*ConfigureIfaceResponse, error) {
	out := new(ConfigureIfaceResponse)
	err := grpc.Invoke(ctx, "/messages.NetworkControl/ConfigureIface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkControl service

type NetworkControlServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreateBridge(context.Context, *CreateBridgeRequest) (*OVSResponse, error)
	DeleteBridge(context.Context, *DeleteBridgeRequest) (*OVSResponse, error)
	AddPort(context.Context, *AddPortRequest) (*OVSResponse, error)
	DeletePort(context.Context, *DeletePortRequest) (*OVSResponse, error)
	AddFlow(context.Context, *AddFlowRequest) (*OVSResponse, error)
	DeleteFlow(context.Context, *DeleteFlowRequest) (*OVSResponse, error)
	DumpFlows(context.Context, *DumpFlowsRequest) (*DumpFlowsResponse, error)
	DumpPorts(context.Context, *DumpPortsRequest) (*DumpPortsResponse, error)
	DumpPort(context.Context, *DumpPortRequest) (*DumpPortResponse, error)
	FindNetworkNamespacePath(context.Context, *FindNetworkNamespacePathRequest) (*FindNetworkNamespacePathResponse, error)
	ConnectBridge(context.Context, *ConnectBridgeRequest) (*ConnectBridgeResponse, error)
	ConfigureIface(context.Context, *ConfigureIfaceRequest) (*ConfigureIfaceResponse, error)
}

func RegisterNetworkControlServer(s *grpc.Server, srv NetworkControlServer) {
	s.RegisterService(&_NetworkControl_serviceDesc, srv)
}

func _NetworkControl_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/CreateBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).CreateBridge(ctx, req.(*CreateBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_DeleteBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).DeleteBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/DeleteBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).DeleteBridge(ctx, req.(*DeleteBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_AddPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).AddPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/AddPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).AddPort(ctx, req.(*AddPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/DeletePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).DeletePort(ctx, req.(*DeletePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_AddFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).AddFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/AddFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).AddFlow(ctx, req.(*AddFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_DeleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).DeleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/DeleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).DeleteFlow(ctx, req.(*DeleteFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_DumpFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).DumpFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/DumpFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).DumpFlows(ctx, req.(*DumpFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_DumpPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).DumpPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/DumpPorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).DumpPorts(ctx, req.(*DumpPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_DumpPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).DumpPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/DumpPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).DumpPort(ctx, req.(*DumpPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_FindNetworkNamespacePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNetworkNamespacePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).FindNetworkNamespacePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/FindNetworkNamespacePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).FindNetworkNamespacePath(ctx, req.(*FindNetworkNamespacePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_ConnectBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).ConnectBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/ConnectBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).ConnectBridge(ctx, req.(*ConnectBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkControl_ConfigureIface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureIfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControlServer).ConfigureIface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.NetworkControl/ConfigureIface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControlServer).ConfigureIface(ctx, req.(*ConfigureIfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.NetworkControl",
	HandlerType: (*NetworkControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _NetworkControl_Echo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _NetworkControl_Ping_Handler,
		},
		{
			MethodName: "CreateBridge",
			Handler:    _NetworkControl_CreateBridge_Handler,
		},
		{
			MethodName: "DeleteBridge",
			Handler:    _NetworkControl_DeleteBridge_Handler,
		},
		{
			MethodName: "AddPort",
			Handler:    _NetworkControl_AddPort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _NetworkControl_DeletePort_Handler,
		},
		{
			MethodName: "AddFlow",
			Handler:    _NetworkControl_AddFlow_Handler,
		},
		{
			MethodName: "DeleteFlow",
			Handler:    _NetworkControl_DeleteFlow_Handler,
		},
		{
			MethodName: "DumpFlows",
			Handler:    _NetworkControl_DumpFlows_Handler,
		},
		{
			MethodName: "DumpPorts",
			Handler:    _NetworkControl_DumpPorts_Handler,
		},
		{
			MethodName: "DumpPort",
			Handler:    _NetworkControl_DumpPort_Handler,
		},
		{
			MethodName: "FindNetworkNamespacePath",
			Handler:    _NetworkControl_FindNetworkNamespacePath_Handler,
		},
		{
			MethodName: "ConnectBridge",
			Handler:    _NetworkControl_ConnectBridge_Handler,
		},
		{
			MethodName: "ConfigureIface",
			Handler:    _NetworkControl_ConfigureIface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages/messages.proto",
}

func init() { proto.RegisterFile("messages/messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x5e, 0xbb, 0xb1, 0x75, 0xb7, 0x52, 0x98, 0xf7, 0x83, 0x90, 0xc1, 0xd6, 0xf9, 0x69, 0x20,
	0x34, 0xa4, 0x21, 0xc4, 0x0b, 0x2f, 0xac, 0xa3, 0x52, 0x91, 0x18, 0xa5, 0x65, 0x13, 0x88, 0x27,
	0x2f, 0xf1, 0x9a, 0x88, 0x2e, 0x0e, 0xb1, 0xab, 0x8a, 0xbf, 0x81, 0x37, 0xfe, 0x62, 0x64, 0x27,
	0x4e, 0x9c, 0xb4, 0x81, 0xac, 0xda, 0x9b, 0xef, 0x7c, 0xf7, 0xdd, 0x77, 0xf1, 0xf5, 0xbe, 0xc2,
	0xa3, 0x1b, 0xca, 0x39, 0x19, 0x51, 0xfe, 0x52, 0x1f, 0x8e, 0xc3, 0x88, 0x09, 0x86, 0x1a, 0xda,
	0xc6, 0x87, 0xb0, 0xf1, 0xde, 0xf1, 0xd8, 0x80, 0xfe, 0x9c, 0x50, 0x2e, 0x10, 0x82, 0x95, 0x29,
	0x8b, 0x5c, 0xab, 0xd6, 0xae, 0x1d, 0xad, 0x0f, 0xd4, 0x19, 0x63, 0x68, 0xc6, 0x21, 0x3c, 0x64,
	0x01, 0xa7, 0x73, 0x63, 0x0e, 0x61, 0xa3, 0xef, 0x07, 0x23, 0x03, 0x26, 0xf4, 0x83, 0x91, 0x0e,
	0x91, 0x67, 0x09, 0x13, 0x87, 0x64, 0x30, 0x21, 0x33, 0x62, 0x58, 0x30, 0xc2, 0x43, 0xd8, 0xf8,
	0x74, 0x39, 0x34, 0x43, 0xc4, 0xaf, 0x90, 0xea, 0x10, 0x79, 0x46, 0x16, 0xac, 0xf1, 0x89, 0xe3,
	0x50, 0xce, 0xad, 0x7a, 0xbb, 0x76, 0xd4, 0x18, 0x68, 0x13, 0xed, 0xc2, 0x6a, 0x44, 0x09, 0x67,
	0x81, 0xb5, 0xac, 0xe2, 0x13, 0x0b, 0x7f, 0x83, 0xad, 0x4e, 0x44, 0x89, 0xa0, 0xa7, 0x91, 0xef,
	0x8e, 0xa8, 0xe6, 0xb8, 0x0f, 0x70, 0xa5, 0x1c, 0xe7, 0xe4, 0x46, 0x97, 0x30, 0x3c, 0x08, 0x43,
	0xd3, 0x25, 0x82, 0x84, 0x44, 0x78, 0x5f, 0x24, 0x89, 0xba, 0x8a, 0xc8, 0xf9, 0xf0, 0x6b, 0xd8,
	0x3a, 0xa3, 0x63, 0x7a, 0x4b, 0x68, 0x7c, 0x0e, 0xad, 0x77, 0xae, 0xdb, 0x67, 0x91, 0xa8, 0x4a,
	0xe6, 0x09, 0xac, 0xfb, 0xd7, 0xc4, 0x89, 0xaf, 0x63, 0x26, 0x99, 0x03, 0x7f, 0x86, 0xcd, 0x98,
	0xc6, 0xdd, 0x41, 0xf6, 0x15, 0xc5, 0xee, 0x98, 0x4d, 0xab, 0xe2, 0xed, 0x03, 0x5c, 0x8f, 0xd9,
	0x74, 0x28, 0x22, 0xf9, 0xf2, 0x31, 0xa0, 0xe1, 0xc1, 0x43, 0x4d, 0xf2, 0x2e, 0x41, 0x4f, 0xe0,
	0xe1, 0xd9, 0xe4, 0x26, 0x94, 0x90, 0xbc, 0xea, 0xd7, 0xff, 0x0e, 0x9b, 0x46, 0x4e, 0x32, 0x6a,
	0xdb, 0x70, 0x4f, 0xc2, 0x72, 0xab, 0xd6, 0x5e, 0x3e, 0x6a, 0x0e, 0x62, 0x63, 0x81, 0x61, 0x4b,
	0x08, 0xc9, 0x87, 0xb8, 0x2d, 0xa1, 0x24, 0x27, 0x23, 0x14, 0x4a, 0x87, 0x26, 0xa4, 0x8c, 0x05,
	0x08, 0x7d, 0x84, 0x07, 0x1a, 0xbc, 0xea, 0x47, 0xb7, 0xa1, 0x21, 0xab, 0x19, 0x83, 0x91, 0xda,
	0xf8, 0x6b, 0xd6, 0x5f, 0xfe, 0x97, 0x1c, 0x09, 0x85, 0xd4, 0x1c, 0xa8, 0xf3, 0x02, 0x44, 0x39,
	0x1c, 0x74, 0xfd, 0xc0, 0x3d, 0xa7, 0x62, 0xca, 0xa2, 0x1f, 0xb2, 0x18, 0x0f, 0x89, 0x43, 0xfb,
	0x44, 0x78, 0x9a, 0xb8, 0x05, 0x6b, 0x21, 0x73, 0x0d, 0xd6, 0xda, 0x94, 0xc3, 0x1c, 0xe8, 0x0c,
	0x3d, 0xcc, 0xa9, 0x23, 0xc9, 0xbb, 0xb8, 0xe8, 0x9d, 0x25, 0x35, 0xb5, 0x89, 0x3d, 0x68, 0x97,
	0x17, 0x35, 0xda, 0x23, 0xc2, 0x4b, 0x17, 0x15, 0x11, 0xde, 0x02, 0xed, 0xfd, 0xa9, 0xc1, 0x76,
	0x87, 0x05, 0x01, 0x75, 0x44, 0x7e, 0x59, 0x94, 0xc0, 0x6b, 0xc2, 0xf5, 0x1c, 0x61, 0xf4, 0x02,
	0x36, 0x1d, 0x16, 0x08, 0xe2, 0x07, 0x34, 0xba, 0xa4, 0xc2, 0x53, 0x1f, 0x23, 0xae, 0x34, 0x7b,
	0x51, 0x78, 0xe9, 0x95, 0x99, 0xc9, 0xeb, 0xc1, 0x4e, 0x81, 0x53, 0xd2, 0xb3, 0xd1, 0x5f, 0xad,
	0xac, 0xbf, 0x7a, 0xae, 0x3f, 0x5f, 0x41, 0x5d, 0xfb, 0xa3, 0x49, 0x44, 0x7b, 0x72, 0x8d, 0xfc,
	0xab, 0xbf, 0x16, 0xd4, 0x7b, 0xfd, 0x04, 0xa0, 0xde, 0xeb, 0xdf, 0xae, 0x2b, 0xfc, 0x01, 0x76,
	0x8b, 0xa5, 0x16, 0xa5, 0x7d, 0xf2, 0xbb, 0x01, 0xad, 0xe4, 0xf5, 0x3b, 0x2c, 0x10, 0x11, 0x1b,
	0xa3, 0x37, 0xb0, 0x22, 0xf5, 0x0e, 0xed, 0x1c, 0xa7, 0xaa, 0x69, 0x48, 0xa4, 0xbd, 0x5b, 0x74,
	0xc7, 0xb5, 0xf1, 0x92, 0x4c, 0x94, 0x0a, 0x67, 0x26, 0x1a, 0xa2, 0x68, 0x26, 0x9a, 0x42, 0x88,
	0x97, 0x50, 0x17, 0x9a, 0xa6, 0x42, 0xa1, 0xa7, 0x59, 0xe4, 0x1c, 0xe5, 0xb2, 0x0d, 0x7c, 0x43,
	0x2d, 0x63, 0x1c, 0x53, 0x8e, 0x4c, 0x9c, 0x39, 0x32, 0x55, 0x8e, 0xf3, 0x16, 0xd6, 0x12, 0x7d,
	0x42, 0x56, 0x16, 0x93, 0x97, 0xac, 0xf2, 0xec, 0x53, 0x80, 0x4c, 0x8d, 0xd0, 0x5e, 0x91, 0x43,
	0x25, 0x8c, 0x98, 0x81, 0x5c, 0xd1, 0x05, 0x06, 0x86, 0x78, 0x54, 0x60, 0xa0, 0x00, 0x66, 0x18,
	0x54, 0xc2, 0xe8, 0xc2, 0x7a, 0xaa, 0x12, 0xc8, 0x36, 0x20, 0x0a, 0x72, 0x63, 0xef, 0xcd, 0xbd,
	0x2b, 0xe2, 0xa8, 0xe5, 0x5e, 0xc4, 0x31, 0x55, 0xa2, 0x88, 0x93, 0x53, 0x03, 0xbc, 0x84, 0x3a,
	0xd0, 0xd0, 0x6e, 0xf4, 0x78, 0x36, 0x54, 0xa3, 0xd8, 0xf3, 0xae, 0x52, 0x10, 0x0e, 0x56, 0xd9,
	0xba, 0x43, 0xcf, 0xb2, 0xcc, 0xff, 0xec, 0x61, 0xfb, 0x79, 0x95, 0xd0, 0xb4, 0xe8, 0x00, 0xee,
	0xe7, 0x96, 0x0c, 0xda, 0x37, 0xc6, 0x7b, 0xce, 0x46, 0xb4, 0x0f, 0x4a, 0xef, 0x53, 0xcc, 0x0b,
	0x68, 0xe5, 0x57, 0x00, 0xca, 0x27, 0xcd, 0xee, 0x21, 0xbb, 0x5d, 0x1e, 0xa0, 0x61, 0xaf, 0x56,
	0xd5, 0xdf, 0xe3, 0x57, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x34, 0x73, 0xee, 0x39, 0x0b,
	0x00, 0x00,
}
